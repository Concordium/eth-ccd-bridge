DO $$ BEGIN
CREATE TYPE concordium_transaction_status AS ENUM (
   'pending',
   'failed',
   'finalized',
   'missing'
   );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
CREATE TYPE concordium_event_type AS ENUM (
    'token_map',
    'deposit',
    'withdraw',
    'grant_role',
    'revoke_role'
   );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
CREATE TYPE ethereum_transaction_status AS ENUM (
    'pending',
    'confirmed',
    'missing'
   );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
CREATE TYPE network AS ENUM (
    'ethereum',
    'concordium'
   );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

CREATE TABLE IF NOT EXISTS concordium_transactions (
       id SERIAL8 PRIMARY KEY UNIQUE,
       tx_hash BYTEA NOT NULL,
       tx BYTEA NOT NULL,
       origin_tx_hash BYTEA NOT NULL,
       -- when the transaction was inserted
       timestamp INT8 NOT NULL,
       status concordium_transaction_status NOT NULL,
       CONSTRAINT concordium_transactions_tx_hash_unique UNIQUE (tx_hash)
       );

CREATE TABLE IF NOT EXISTS concordium_events (
       id SERIAL8 PRIMARY KEY UNIQUE,
       -- Hash of the transaction that logged the event. In principle
       -- a transaction can emit multiple events.
       tx_hash BYTEA NOT NULL,
       -- Event index of the event if present. This is only for events
       -- generated by the concordium contracts. Meaning Withdraw events.
       event_index INT8,
       -- The type of event.
       event_type concordium_event_type NOT NULL,
       -- If withdraw, the receiver of the token. Otherwise NULL.
       receiver BYTEA,
       -- Serialized event, exactly as logged by the contract.
       event_data BYTEA NOT NULL,
       -- Index of the child contract, if deposit or withdraw, otherwise NULL.
       child_index INT8,
       -- Subindex of the child contract, if deposit or withdraw, otherwise NULL.
       child_subindex INT8,
       -- Amount withdrawn, if withdrawal. Otherwise NULL.
       amount TEXT,
       -- Whether the withdrawal has already been completed. If so, then
       -- it is the hash of the transaction that completed it (withdrawn the tokens).
       processed BYTEA,
       -- The latest Merkle root registered in the Ethereum contract that
       -- contains the event. Only applies to Withdraw events. NULL means that
       -- it is not yet registered.
       root BYTEA,
       pending_root BYTEA,
       -- Hash of the event as a leaf in the Merkle tree. Only present for withdraw events, otherwise NULL.
       event_merkle_hash BYTEA
       );

CREATE TABLE IF NOT EXISTS token_maps (
       id SERIAL8 PRIMARY KEY UNIQUE,
       root BYTEA NOT NULL,
       child_index INT8 NOT NULL,
       child_subindex INT8 NOT NULL,
       eth_name TEXT NOT NULL,
       decimals SMALLINT NOT NULL,
       CONSTRAINT token_maps_root_unique UNIQUE (root)
       );

CREATE TABLE IF NOT EXISTS ethereum_withdraw_events (
       id SERIAL8 PRIMARY KEY UNIQUE,
       -- Hash of the transaction that logged the event.
       tx_hash BYTEA NOT NULL,
       -- Event index of the event if present. This is only for events
       -- generated by the concordium contracts. Meaning Withdraw events.
       event_index INT8,
       -- Amount withdrawn.
       amount TEXT NOT NULL,
       -- Receiver of the withdrawal.
       receiver BYTEA NOT NULL,
       -- Hash of the transaction on Concordium that initiated the withdrawal.
       origin_tx_hash BYTEA NOT NULL,
       origin_event_index INT8 NOT NULL
       );


CREATE TABLE IF NOT EXISTS ethereum_deposit_events (
       id SERIAL8 PRIMARY KEY UNIQUE,
       -- Hash of the transaction on Ethereum that initiated the deposit.
       origin_tx_hash BYTEA NOT NULL,
       origin_event_index INT8 NOT NULL,
       -- Amount deposited.
       amount TEXT NOT NULL,
       -- Depositor address.
       depositor BYTEA NOT NULL,
       -- Address of the root token.
       root_token BYTEA NOT NULL,
       -- If completed, this is the hash of the concordium transaction that did it.
       -- NULL otherwise.
       tx_hash BYTEA
       );

CREATE TABLE IF NOT EXISTS ethereum_transactions (
       id SERIAL8 PRIMARY KEY UNIQUE,
       tx_hash BYTEA NOT NULL,
       -- The actual transaction, for retries. This is signed already
       -- so cannot be manipulated.
       tx BYTEA NOT NULL,
       -- when the transaction was inserted
       timestamp INT8 NOT NULL,
       status ethereum_transaction_status NOT NULL,
       CONSTRAINT ethereum_transactions_tx_hash_unique UNIQUE (tx_hash)
       );

CREATE TABLE IF NOT EXISTS checkpoints (
       network network PRIMARY KEY UNIQUE,
       last_processed_height INT8 NOT NULL
);

CREATE TABLE IF NOT EXISTS merkle_roots (
       id SERIAL8 PRIMARY KEY UNIQUE,
       root BYTEA NOT NULL
);


-- TODO: Add index for concordium_events to easily filter out withdraws.
